// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package memory

import (
	"io"

	mock "github.com/stretchr/testify/mock"
)

// NewBufferMock creates a new instance of BufferMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBufferMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *BufferMock {
	mock := &BufferMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// BufferMock is an autogenerated mock type for the Buffer type
type BufferMock struct {
	mock.Mock
}

type BufferMock_Expecter struct {
	mock *mock.Mock
}

func (_m *BufferMock) EXPECT() *BufferMock_Expecter {
	return &BufferMock_Expecter{mock: &_m.Mock}
}

// GetCapacity provides a mock function for the type BufferMock
func (_mock *BufferMock) GetCapacity() int {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCapacity")
	}

	var r0 int
	if returnFunc, ok := ret.Get(0).(func() int); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int)
	}
	return r0
}

// BufferMock_GetCapacity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCapacity'
type BufferMock_GetCapacity_Call struct {
	*mock.Call
}

// GetCapacity is a helper method to define mock.On call
func (_e *BufferMock_Expecter) GetCapacity() *BufferMock_GetCapacity_Call {
	return &BufferMock_GetCapacity_Call{Call: _e.mock.On("GetCapacity")}
}

func (_c *BufferMock_GetCapacity_Call) Run(run func()) *BufferMock_GetCapacity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BufferMock_GetCapacity_Call) Return(n int) *BufferMock_GetCapacity_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *BufferMock_GetCapacity_Call) RunAndReturn(run func() int) *BufferMock_GetCapacity_Call {
	_c.Call.Return(run)
	return _c
}

// GetSize provides a mock function for the type BufferMock
func (_mock *BufferMock) GetSize() int {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSize")
	}

	var r0 int
	if returnFunc, ok := ret.Get(0).(func() int); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int)
	}
	return r0
}

// BufferMock_GetSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSize'
type BufferMock_GetSize_Call struct {
	*mock.Call
}

// GetSize is a helper method to define mock.On call
func (_e *BufferMock_Expecter) GetSize() *BufferMock_GetSize_Call {
	return &BufferMock_GetSize_Call{Call: _e.mock.On("GetSize")}
}

func (_c *BufferMock_GetSize_Call) Run(run func()) *BufferMock_GetSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BufferMock_GetSize_Call) Return(n int) *BufferMock_GetSize_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *BufferMock_GetSize_Call) RunAndReturn(run func() int) *BufferMock_GetSize_Call {
	_c.Call.Return(run)
	return _c
}

// ReadFrom provides a mock function for the type BufferMock
func (_mock *BufferMock) ReadFrom(r io.Reader) (int64, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ReadFrom")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(io.Reader) (int64, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(io.Reader) int64); ok {
		r0 = returnFunc(r)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(io.Reader) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// BufferMock_ReadFrom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadFrom'
type BufferMock_ReadFrom_Call struct {
	*mock.Call
}

// ReadFrom is a helper method to define mock.On call
//   - r io.Reader
func (_e *BufferMock_Expecter) ReadFrom(r interface{}) *BufferMock_ReadFrom_Call {
	return &BufferMock_ReadFrom_Call{Call: _e.mock.On("ReadFrom", r)}
}

func (_c *BufferMock_ReadFrom_Call) Run(run func(r io.Reader)) *BufferMock_ReadFrom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 io.Reader
		if args[0] != nil {
			arg0 = args[0].(io.Reader)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *BufferMock_ReadFrom_Call) Return(n int64, err error) *BufferMock_ReadFrom_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *BufferMock_ReadFrom_Call) RunAndReturn(run func(r io.Reader) (int64, error)) *BufferMock_ReadFrom_Call {
	_c.Call.Return(run)
	return _c
}

// Release provides a mock function for the type BufferMock
func (_mock *BufferMock) Release() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Release")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// BufferMock_Release_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Release'
type BufferMock_Release_Call struct {
	*mock.Call
}

// Release is a helper method to define mock.On call
func (_e *BufferMock_Expecter) Release() *BufferMock_Release_Call {
	return &BufferMock_Release_Call{Call: _e.mock.On("Release")}
}

func (_c *BufferMock_Release_Call) Run(run func()) *BufferMock_Release_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BufferMock_Release_Call) Return(err error) *BufferMock_Release_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *BufferMock_Release_Call) RunAndReturn(run func() error) *BufferMock_Release_Call {
	_c.Call.Return(run)
	return _c
}

// Retain provides a mock function for the type BufferMock
func (_mock *BufferMock) Retain() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Retain")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// BufferMock_Retain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Retain'
type BufferMock_Retain_Call struct {
	*mock.Call
}

// Retain is a helper method to define mock.On call
func (_e *BufferMock_Expecter) Retain() *BufferMock_Retain_Call {
	return &BufferMock_Retain_Call{Call: _e.mock.On("Retain")}
}

func (_c *BufferMock_Retain_Call) Run(run func()) *BufferMock_Retain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BufferMock_Retain_Call) Return(err error) *BufferMock_Retain_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *BufferMock_Retain_Call) RunAndReturn(run func() error) *BufferMock_Retain_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function for the type BufferMock
func (_mock *BufferMock) Write(p []byte) (int, error) {
	ret := _mock.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return returnFunc(p)
	}
	if returnFunc, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = returnFunc(p)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = returnFunc(p)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// BufferMock_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type BufferMock_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - p []byte
func (_e *BufferMock_Expecter) Write(p interface{}) *BufferMock_Write_Call {
	return &BufferMock_Write_Call{Call: _e.mock.On("Write", p)}
}

func (_c *BufferMock_Write_Call) Run(run func(p []byte)) *BufferMock_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *BufferMock_Write_Call) Return(n int, err error) *BufferMock_Write_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *BufferMock_Write_Call) RunAndReturn(run func(p []byte) (int, error)) *BufferMock_Write_Call {
	_c.Call.Return(run)
	return _c
}

// WriteTo provides a mock function for the type BufferMock
func (_mock *BufferMock) WriteTo(w io.Writer) (int64, error) {
	ret := _mock.Called(w)

	if len(ret) == 0 {
		panic("no return value specified for WriteTo")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(io.Writer) (int64, error)); ok {
		return returnFunc(w)
	}
	if returnFunc, ok := ret.Get(0).(func(io.Writer) int64); ok {
		r0 = returnFunc(w)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(io.Writer) error); ok {
		r1 = returnFunc(w)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// BufferMock_WriteTo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteTo'
type BufferMock_WriteTo_Call struct {
	*mock.Call
}

// WriteTo is a helper method to define mock.On call
//   - w io.Writer
func (_e *BufferMock_Expecter) WriteTo(w interface{}) *BufferMock_WriteTo_Call {
	return &BufferMock_WriteTo_Call{Call: _e.mock.On("WriteTo", w)}
}

func (_c *BufferMock_WriteTo_Call) Run(run func(w io.Writer)) *BufferMock_WriteTo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 io.Writer
		if args[0] != nil {
			arg0 = args[0].(io.Writer)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *BufferMock_WriteTo_Call) Return(n int64, err error) *BufferMock_WriteTo_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *BufferMock_WriteTo_Call) RunAndReturn(run func(w io.Writer) (int64, error)) *BufferMock_WriteTo_Call {
	_c.Call.Return(run)
	return _c
}
