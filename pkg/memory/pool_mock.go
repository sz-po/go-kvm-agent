// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package memory

import (
	mock "github.com/stretchr/testify/mock"
)

// NewPoolMock creates a new instance of PoolMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPoolMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *PoolMock {
	mock := &PoolMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// PoolMock is an autogenerated mock type for the Pool type
type PoolMock struct {
	mock.Mock
}

type PoolMock_Expecter struct {
	mock *mock.Mock
}

func (_m *PoolMock) EXPECT() *PoolMock_Expecter {
	return &PoolMock_Expecter{mock: &_m.Mock}
}

// Borrow provides a mock function for the type PoolMock
func (_mock *PoolMock) Borrow(size int) (Buffer, error) {
	ret := _mock.Called(size)

	if len(ret) == 0 {
		panic("no return value specified for Borrow")
	}

	var r0 Buffer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int) (Buffer, error)); ok {
		return returnFunc(size)
	}
	if returnFunc, ok := ret.Get(0).(func(int) Buffer); ok {
		r0 = returnFunc(size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Buffer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int) error); ok {
		r1 = returnFunc(size)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PoolMock_Borrow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Borrow'
type PoolMock_Borrow_Call struct {
	*mock.Call
}

// Borrow is a helper method to define mock.On call
//   - size int
func (_e *PoolMock_Expecter) Borrow(size interface{}) *PoolMock_Borrow_Call {
	return &PoolMock_Borrow_Call{Call: _e.mock.On("Borrow", size)}
}

func (_c *PoolMock_Borrow_Call) Run(run func(size int)) *PoolMock_Borrow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *PoolMock_Borrow_Call) Return(buffer Buffer, err error) *PoolMock_Borrow_Call {
	_c.Call.Return(buffer, err)
	return _c
}

func (_c *PoolMock_Borrow_Call) RunAndReturn(run func(size int) (Buffer, error)) *PoolMock_Borrow_Call {
	_c.Call.Return(run)
	return _c
}
