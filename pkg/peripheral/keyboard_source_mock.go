// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package peripheral

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewKeyboardSourceMock creates a new instance of KeyboardSourceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKeyboardSourceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *KeyboardSourceMock {
	mock := &KeyboardSourceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// KeyboardSourceMock is an autogenerated mock type for the KeyboardSource type
type KeyboardSourceMock struct {
	mock.Mock
}

type KeyboardSourceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *KeyboardSourceMock) EXPECT() *KeyboardSourceMock_Expecter {
	return &KeyboardSourceMock_Expecter{mock: &_m.Mock}
}

// Capabilities provides a mock function for the type KeyboardSourceMock
func (_mock *KeyboardSourceMock) Capabilities() []PeripheralCapability {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Capabilities")
	}

	var r0 []PeripheralCapability
	if returnFunc, ok := ret.Get(0).(func() []PeripheralCapability); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]PeripheralCapability)
		}
	}
	return r0
}

// KeyboardSourceMock_Capabilities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Capabilities'
type KeyboardSourceMock_Capabilities_Call struct {
	*mock.Call
}

// Capabilities is a helper method to define mock.On call
func (_e *KeyboardSourceMock_Expecter) Capabilities() *KeyboardSourceMock_Capabilities_Call {
	return &KeyboardSourceMock_Capabilities_Call{Call: _e.mock.On("Capabilities")}
}

func (_c *KeyboardSourceMock_Capabilities_Call) Run(run func()) *KeyboardSourceMock_Capabilities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KeyboardSourceMock_Capabilities_Call) Return(peripheralCapabilitys []PeripheralCapability) *KeyboardSourceMock_Capabilities_Call {
	_c.Call.Return(peripheralCapabilitys)
	return _c
}

func (_c *KeyboardSourceMock_Capabilities_Call) RunAndReturn(run func() []PeripheralCapability) *KeyboardSourceMock_Capabilities_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrentLayout provides a mock function for the type KeyboardSourceMock
func (_mock *KeyboardSourceMock) GetCurrentLayout() (KeyboardLayout, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentLayout")
	}

	var r0 KeyboardLayout
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (KeyboardLayout, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() KeyboardLayout); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(KeyboardLayout)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// KeyboardSourceMock_GetCurrentLayout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentLayout'
type KeyboardSourceMock_GetCurrentLayout_Call struct {
	*mock.Call
}

// GetCurrentLayout is a helper method to define mock.On call
func (_e *KeyboardSourceMock_Expecter) GetCurrentLayout() *KeyboardSourceMock_GetCurrentLayout_Call {
	return &KeyboardSourceMock_GetCurrentLayout_Call{Call: _e.mock.On("GetCurrentLayout")}
}

func (_c *KeyboardSourceMock_GetCurrentLayout_Call) Run(run func()) *KeyboardSourceMock_GetCurrentLayout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KeyboardSourceMock_GetCurrentLayout_Call) Return(keyboardLayout KeyboardLayout, err error) *KeyboardSourceMock_GetCurrentLayout_Call {
	_c.Call.Return(keyboardLayout, err)
	return _c
}

func (_c *KeyboardSourceMock_GetCurrentLayout_Call) RunAndReturn(run func() (KeyboardLayout, error)) *KeyboardSourceMock_GetCurrentLayout_Call {
	_c.Call.Return(run)
	return _c
}

// Id provides a mock function for the type KeyboardSourceMock
func (_mock *KeyboardSourceMock) Id() PeripheralId {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Id")
	}

	var r0 PeripheralId
	if returnFunc, ok := ret.Get(0).(func() PeripheralId); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(PeripheralId)
	}
	return r0
}

// KeyboardSourceMock_Id_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Id'
type KeyboardSourceMock_Id_Call struct {
	*mock.Call
}

// Id is a helper method to define mock.On call
func (_e *KeyboardSourceMock_Expecter) Id() *KeyboardSourceMock_Id_Call {
	return &KeyboardSourceMock_Id_Call{Call: _e.mock.On("Id")}
}

func (_c *KeyboardSourceMock_Id_Call) Run(run func()) *KeyboardSourceMock_Id_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KeyboardSourceMock_Id_Call) Return(peripheralId PeripheralId) *KeyboardSourceMock_Id_Call {
	_c.Call.Return(peripheralId)
	return _c
}

func (_c *KeyboardSourceMock_Id_Call) RunAndReturn(run func() PeripheralId) *KeyboardSourceMock_Id_Call {
	_c.Call.Return(run)
	return _c
}

// KeyboardControlChannel provides a mock function for the type KeyboardSourceMock
func (_mock *KeyboardSourceMock) KeyboardControlChannel(ctx context.Context) <-chan KeyboardControlEvent {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for KeyboardControlChannel")
	}

	var r0 <-chan KeyboardControlEvent
	if returnFunc, ok := ret.Get(0).(func(context.Context) <-chan KeyboardControlEvent); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan KeyboardControlEvent)
		}
	}
	return r0
}

// KeyboardSourceMock_KeyboardControlChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KeyboardControlChannel'
type KeyboardSourceMock_KeyboardControlChannel_Call struct {
	*mock.Call
}

// KeyboardControlChannel is a helper method to define mock.On call
//   - ctx context.Context
func (_e *KeyboardSourceMock_Expecter) KeyboardControlChannel(ctx interface{}) *KeyboardSourceMock_KeyboardControlChannel_Call {
	return &KeyboardSourceMock_KeyboardControlChannel_Call{Call: _e.mock.On("KeyboardControlChannel", ctx)}
}

func (_c *KeyboardSourceMock_KeyboardControlChannel_Call) Run(run func(ctx context.Context)) *KeyboardSourceMock_KeyboardControlChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *KeyboardSourceMock_KeyboardControlChannel_Call) Return(keyboardControlEventCh <-chan KeyboardControlEvent) *KeyboardSourceMock_KeyboardControlChannel_Call {
	_c.Call.Return(keyboardControlEventCh)
	return _c
}

func (_c *KeyboardSourceMock_KeyboardControlChannel_Call) RunAndReturn(run func(ctx context.Context) <-chan KeyboardControlEvent) *KeyboardSourceMock_KeyboardControlChannel_Call {
	_c.Call.Return(run)
	return _c
}

// KeyboardDataChannel provides a mock function for the type KeyboardSourceMock
func (_mock *KeyboardSourceMock) KeyboardDataChannel(ctx context.Context) <-chan KeyboardEvent {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for KeyboardDataChannel")
	}

	var r0 <-chan KeyboardEvent
	if returnFunc, ok := ret.Get(0).(func(context.Context) <-chan KeyboardEvent); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan KeyboardEvent)
		}
	}
	return r0
}

// KeyboardSourceMock_KeyboardDataChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KeyboardDataChannel'
type KeyboardSourceMock_KeyboardDataChannel_Call struct {
	*mock.Call
}

// KeyboardDataChannel is a helper method to define mock.On call
//   - ctx context.Context
func (_e *KeyboardSourceMock_Expecter) KeyboardDataChannel(ctx interface{}) *KeyboardSourceMock_KeyboardDataChannel_Call {
	return &KeyboardSourceMock_KeyboardDataChannel_Call{Call: _e.mock.On("KeyboardDataChannel", ctx)}
}

func (_c *KeyboardSourceMock_KeyboardDataChannel_Call) Run(run func(ctx context.Context)) *KeyboardSourceMock_KeyboardDataChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *KeyboardSourceMock_KeyboardDataChannel_Call) Return(keyboardEventCh <-chan KeyboardEvent) *KeyboardSourceMock_KeyboardDataChannel_Call {
	_c.Call.Return(keyboardEventCh)
	return _c
}

func (_c *KeyboardSourceMock_KeyboardDataChannel_Call) RunAndReturn(run func(ctx context.Context) <-chan KeyboardEvent) *KeyboardSourceMock_KeyboardDataChannel_Call {
	_c.Call.Return(run)
	return _c
}

// Terminate provides a mock function for the type KeyboardSourceMock
func (_mock *KeyboardSourceMock) Terminate(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Terminate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// KeyboardSourceMock_Terminate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Terminate'
type KeyboardSourceMock_Terminate_Call struct {
	*mock.Call
}

// Terminate is a helper method to define mock.On call
//   - ctx context.Context
func (_e *KeyboardSourceMock_Expecter) Terminate(ctx interface{}) *KeyboardSourceMock_Terminate_Call {
	return &KeyboardSourceMock_Terminate_Call{Call: _e.mock.On("Terminate", ctx)}
}

func (_c *KeyboardSourceMock_Terminate_Call) Run(run func(ctx context.Context)) *KeyboardSourceMock_Terminate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *KeyboardSourceMock_Terminate_Call) Return(err error) *KeyboardSourceMock_Terminate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *KeyboardSourceMock_Terminate_Call) RunAndReturn(run func(ctx context.Context) error) *KeyboardSourceMock_Terminate_Call {
	_c.Call.Return(run)
	return _c
}
