// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package peripheral

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewPeripheralMock creates a new instance of PeripheralMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPeripheralMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *PeripheralMock {
	mock := &PeripheralMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// PeripheralMock is an autogenerated mock type for the Peripheral type
type PeripheralMock struct {
	mock.Mock
}

type PeripheralMock_Expecter struct {
	mock *mock.Mock
}

func (_m *PeripheralMock) EXPECT() *PeripheralMock_Expecter {
	return &PeripheralMock_Expecter{mock: &_m.Mock}
}

// GetCapabilities provides a mock function for the type PeripheralMock
func (_mock *PeripheralMock) GetCapabilities() []PeripheralCapability {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCapabilities")
	}

	var r0 []PeripheralCapability
	if returnFunc, ok := ret.Get(0).(func() []PeripheralCapability); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]PeripheralCapability)
		}
	}
	return r0
}

// PeripheralMock_GetCapabilities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCapabilities'
type PeripheralMock_GetCapabilities_Call struct {
	*mock.Call
}

// GetCapabilities is a helper method to define mock.On call
func (_e *PeripheralMock_Expecter) GetCapabilities() *PeripheralMock_GetCapabilities_Call {
	return &PeripheralMock_GetCapabilities_Call{Call: _e.mock.On("GetCapabilities")}
}

func (_c *PeripheralMock_GetCapabilities_Call) Run(run func()) *PeripheralMock_GetCapabilities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PeripheralMock_GetCapabilities_Call) Return(peripheralCapabilitys []PeripheralCapability) *PeripheralMock_GetCapabilities_Call {
	_c.Call.Return(peripheralCapabilitys)
	return _c
}

func (_c *PeripheralMock_GetCapabilities_Call) RunAndReturn(run func() []PeripheralCapability) *PeripheralMock_GetCapabilities_Call {
	_c.Call.Return(run)
	return _c
}

// GetId provides a mock function for the type PeripheralMock
func (_mock *PeripheralMock) GetId() PeripheralId {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetId")
	}

	var r0 PeripheralId
	if returnFunc, ok := ret.Get(0).(func() PeripheralId); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(PeripheralId)
	}
	return r0
}

// PeripheralMock_GetId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetId'
type PeripheralMock_GetId_Call struct {
	*mock.Call
}

// GetId is a helper method to define mock.On call
func (_e *PeripheralMock_Expecter) GetId() *PeripheralMock_GetId_Call {
	return &PeripheralMock_GetId_Call{Call: _e.mock.On("GetId")}
}

func (_c *PeripheralMock_GetId_Call) Run(run func()) *PeripheralMock_GetId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PeripheralMock_GetId_Call) Return(peripheralId PeripheralId) *PeripheralMock_GetId_Call {
	_c.Call.Return(peripheralId)
	return _c
}

func (_c *PeripheralMock_GetId_Call) RunAndReturn(run func() PeripheralId) *PeripheralMock_GetId_Call {
	_c.Call.Return(run)
	return _c
}

// GetName provides a mock function for the type PeripheralMock
func (_mock *PeripheralMock) GetName() PeripheralName {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 PeripheralName
	if returnFunc, ok := ret.Get(0).(func() PeripheralName); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(PeripheralName)
	}
	return r0
}

// PeripheralMock_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type PeripheralMock_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *PeripheralMock_Expecter) GetName() *PeripheralMock_GetName_Call {
	return &PeripheralMock_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *PeripheralMock_GetName_Call) Run(run func()) *PeripheralMock_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PeripheralMock_GetName_Call) Return(peripheralName PeripheralName) *PeripheralMock_GetName_Call {
	_c.Call.Return(peripheralName)
	return _c
}

func (_c *PeripheralMock_GetName_Call) RunAndReturn(run func() PeripheralName) *PeripheralMock_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// Terminate provides a mock function for the type PeripheralMock
func (_mock *PeripheralMock) Terminate(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Terminate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PeripheralMock_Terminate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Terminate'
type PeripheralMock_Terminate_Call struct {
	*mock.Call
}

// Terminate is a helper method to define mock.On call
//   - ctx context.Context
func (_e *PeripheralMock_Expecter) Terminate(ctx interface{}) *PeripheralMock_Terminate_Call {
	return &PeripheralMock_Terminate_Call{Call: _e.mock.On("Terminate", ctx)}
}

func (_c *PeripheralMock_Terminate_Call) Run(run func(ctx context.Context)) *PeripheralMock_Terminate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *PeripheralMock_Terminate_Call) Return(err error) *PeripheralMock_Terminate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PeripheralMock_Terminate_Call) RunAndReturn(run func(ctx context.Context) error) *PeripheralMock_Terminate_Call {
	_c.Call.Return(run)
	return _c
}
