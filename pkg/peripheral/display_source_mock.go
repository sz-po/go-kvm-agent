// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package peripheral

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewDisplaySourceMock creates a new instance of DisplaySourceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDisplaySourceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *DisplaySourceMock {
	mock := &DisplaySourceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// DisplaySourceMock is an autogenerated mock type for the DisplaySource type
type DisplaySourceMock struct {
	mock.Mock
}

type DisplaySourceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *DisplaySourceMock) EXPECT() *DisplaySourceMock_Expecter {
	return &DisplaySourceMock_Expecter{mock: &_m.Mock}
}

// Capabilities provides a mock function for the type DisplaySourceMock
func (_mock *DisplaySourceMock) Capabilities() []PeripheralCapability {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Capabilities")
	}

	var r0 []PeripheralCapability
	if returnFunc, ok := ret.Get(0).(func() []PeripheralCapability); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]PeripheralCapability)
		}
	}
	return r0
}

// DisplaySourceMock_Capabilities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Capabilities'
type DisplaySourceMock_Capabilities_Call struct {
	*mock.Call
}

// Capabilities is a helper method to define mock.On call
func (_e *DisplaySourceMock_Expecter) Capabilities() *DisplaySourceMock_Capabilities_Call {
	return &DisplaySourceMock_Capabilities_Call{Call: _e.mock.On("Capabilities")}
}

func (_c *DisplaySourceMock_Capabilities_Call) Run(run func()) *DisplaySourceMock_Capabilities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DisplaySourceMock_Capabilities_Call) Return(peripheralCapabilitys []PeripheralCapability) *DisplaySourceMock_Capabilities_Call {
	_c.Call.Return(peripheralCapabilitys)
	return _c
}

func (_c *DisplaySourceMock_Capabilities_Call) RunAndReturn(run func() []PeripheralCapability) *DisplaySourceMock_Capabilities_Call {
	_c.Call.Return(run)
	return _c
}

// DisplayControlChannel provides a mock function for the type DisplaySourceMock
func (_mock *DisplaySourceMock) DisplayControlChannel(ctx context.Context) <-chan DisplayControlEvent {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DisplayControlChannel")
	}

	var r0 <-chan DisplayControlEvent
	if returnFunc, ok := ret.Get(0).(func(context.Context) <-chan DisplayControlEvent); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan DisplayControlEvent)
		}
	}
	return r0
}

// DisplaySourceMock_DisplayControlChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisplayControlChannel'
type DisplaySourceMock_DisplayControlChannel_Call struct {
	*mock.Call
}

// DisplayControlChannel is a helper method to define mock.On call
//   - ctx context.Context
func (_e *DisplaySourceMock_Expecter) DisplayControlChannel(ctx interface{}) *DisplaySourceMock_DisplayControlChannel_Call {
	return &DisplaySourceMock_DisplayControlChannel_Call{Call: _e.mock.On("DisplayControlChannel", ctx)}
}

func (_c *DisplaySourceMock_DisplayControlChannel_Call) Run(run func(ctx context.Context)) *DisplaySourceMock_DisplayControlChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *DisplaySourceMock_DisplayControlChannel_Call) Return(displayControlEventCh <-chan DisplayControlEvent) *DisplaySourceMock_DisplayControlChannel_Call {
	_c.Call.Return(displayControlEventCh)
	return _c
}

func (_c *DisplaySourceMock_DisplayControlChannel_Call) RunAndReturn(run func(ctx context.Context) <-chan DisplayControlEvent) *DisplaySourceMock_DisplayControlChannel_Call {
	_c.Call.Return(run)
	return _c
}

// DisplayDataChannel provides a mock function for the type DisplaySourceMock
func (_mock *DisplaySourceMock) DisplayDataChannel(ctx context.Context) <-chan DisplayDataEvent {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DisplayDataChannel")
	}

	var r0 <-chan DisplayDataEvent
	if returnFunc, ok := ret.Get(0).(func(context.Context) <-chan DisplayDataEvent); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan DisplayDataEvent)
		}
	}
	return r0
}

// DisplaySourceMock_DisplayDataChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisplayDataChannel'
type DisplaySourceMock_DisplayDataChannel_Call struct {
	*mock.Call
}

// DisplayDataChannel is a helper method to define mock.On call
//   - ctx context.Context
func (_e *DisplaySourceMock_Expecter) DisplayDataChannel(ctx interface{}) *DisplaySourceMock_DisplayDataChannel_Call {
	return &DisplaySourceMock_DisplayDataChannel_Call{Call: _e.mock.On("DisplayDataChannel", ctx)}
}

func (_c *DisplaySourceMock_DisplayDataChannel_Call) Run(run func(ctx context.Context)) *DisplaySourceMock_DisplayDataChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *DisplaySourceMock_DisplayDataChannel_Call) Return(displayDataEventCh <-chan DisplayDataEvent) *DisplaySourceMock_DisplayDataChannel_Call {
	_c.Call.Return(displayDataEventCh)
	return _c
}

func (_c *DisplaySourceMock_DisplayDataChannel_Call) RunAndReturn(run func(ctx context.Context) <-chan DisplayDataEvent) *DisplaySourceMock_DisplayDataChannel_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrentDisplayMode provides a mock function for the type DisplaySourceMock
func (_mock *DisplaySourceMock) GetCurrentDisplayMode() (*DisplayMode, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentDisplayMode")
	}

	var r0 *DisplayMode
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*DisplayMode, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *DisplayMode); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DisplayMode)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DisplaySourceMock_GetCurrentDisplayMode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentDisplayMode'
type DisplaySourceMock_GetCurrentDisplayMode_Call struct {
	*mock.Call
}

// GetCurrentDisplayMode is a helper method to define mock.On call
func (_e *DisplaySourceMock_Expecter) GetCurrentDisplayMode() *DisplaySourceMock_GetCurrentDisplayMode_Call {
	return &DisplaySourceMock_GetCurrentDisplayMode_Call{Call: _e.mock.On("GetCurrentDisplayMode")}
}

func (_c *DisplaySourceMock_GetCurrentDisplayMode_Call) Run(run func()) *DisplaySourceMock_GetCurrentDisplayMode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DisplaySourceMock_GetCurrentDisplayMode_Call) Return(displayMode *DisplayMode, err error) *DisplaySourceMock_GetCurrentDisplayMode_Call {
	_c.Call.Return(displayMode, err)
	return _c
}

func (_c *DisplaySourceMock_GetCurrentDisplayMode_Call) RunAndReturn(run func() (*DisplayMode, error)) *DisplaySourceMock_GetCurrentDisplayMode_Call {
	_c.Call.Return(run)
	return _c
}

// GetDisplaySourceMetrics provides a mock function for the type DisplaySourceMock
func (_mock *DisplaySourceMock) GetDisplaySourceMetrics() DisplaySourceMetrics {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDisplaySourceMetrics")
	}

	var r0 DisplaySourceMetrics
	if returnFunc, ok := ret.Get(0).(func() DisplaySourceMetrics); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(DisplaySourceMetrics)
	}
	return r0
}

// DisplaySourceMock_GetDisplaySourceMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDisplaySourceMetrics'
type DisplaySourceMock_GetDisplaySourceMetrics_Call struct {
	*mock.Call
}

// GetDisplaySourceMetrics is a helper method to define mock.On call
func (_e *DisplaySourceMock_Expecter) GetDisplaySourceMetrics() *DisplaySourceMock_GetDisplaySourceMetrics_Call {
	return &DisplaySourceMock_GetDisplaySourceMetrics_Call{Call: _e.mock.On("GetDisplaySourceMetrics")}
}

func (_c *DisplaySourceMock_GetDisplaySourceMetrics_Call) Run(run func()) *DisplaySourceMock_GetDisplaySourceMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DisplaySourceMock_GetDisplaySourceMetrics_Call) Return(displaySourceMetrics DisplaySourceMetrics) *DisplaySourceMock_GetDisplaySourceMetrics_Call {
	_c.Call.Return(displaySourceMetrics)
	return _c
}

func (_c *DisplaySourceMock_GetDisplaySourceMetrics_Call) RunAndReturn(run func() DisplaySourceMetrics) *DisplaySourceMock_GetDisplaySourceMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// Id provides a mock function for the type DisplaySourceMock
func (_mock *DisplaySourceMock) Id() PeripheralId {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Id")
	}

	var r0 PeripheralId
	if returnFunc, ok := ret.Get(0).(func() PeripheralId); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(PeripheralId)
	}
	return r0
}

// DisplaySourceMock_Id_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Id'
type DisplaySourceMock_Id_Call struct {
	*mock.Call
}

// Id is a helper method to define mock.On call
func (_e *DisplaySourceMock_Expecter) Id() *DisplaySourceMock_Id_Call {
	return &DisplaySourceMock_Id_Call{Call: _e.mock.On("Id")}
}

func (_c *DisplaySourceMock_Id_Call) Run(run func()) *DisplaySourceMock_Id_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DisplaySourceMock_Id_Call) Return(peripheralId PeripheralId) *DisplaySourceMock_Id_Call {
	_c.Call.Return(peripheralId)
	return _c
}

func (_c *DisplaySourceMock_Id_Call) RunAndReturn(run func() PeripheralId) *DisplaySourceMock_Id_Call {
	_c.Call.Return(run)
	return _c
}

// Terminate provides a mock function for the type DisplaySourceMock
func (_mock *DisplaySourceMock) Terminate(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Terminate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DisplaySourceMock_Terminate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Terminate'
type DisplaySourceMock_Terminate_Call struct {
	*mock.Call
}

// Terminate is a helper method to define mock.On call
//   - ctx context.Context
func (_e *DisplaySourceMock_Expecter) Terminate(ctx interface{}) *DisplaySourceMock_Terminate_Call {
	return &DisplaySourceMock_Terminate_Call{Call: _e.mock.On("Terminate", ctx)}
}

func (_c *DisplaySourceMock_Terminate_Call) Run(run func(ctx context.Context)) *DisplaySourceMock_Terminate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *DisplaySourceMock_Terminate_Call) Return(err error) *DisplaySourceMock_Terminate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DisplaySourceMock_Terminate_Call) RunAndReturn(run func(ctx context.Context) error) *DisplaySourceMock_Terminate_Call {
	_c.Call.Return(run)
	return _c
}
