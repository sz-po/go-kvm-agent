// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package peripheral

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewDisplaySourceMock creates a new instance of DisplaySourceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDisplaySourceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *DisplaySourceMock {
	mock := &DisplaySourceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// DisplaySourceMock is an autogenerated mock type for the DisplaySource type
type DisplaySourceMock struct {
	mock.Mock
}

type DisplaySourceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *DisplaySourceMock) EXPECT() *DisplaySourceMock_Expecter {
	return &DisplaySourceMock_Expecter{mock: &_m.Mock}
}

// GetCapabilities provides a mock function for the type DisplaySourceMock
func (_mock *DisplaySourceMock) GetCapabilities() []PeripheralCapability {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCapabilities")
	}

	var r0 []PeripheralCapability
	if returnFunc, ok := ret.Get(0).(func() []PeripheralCapability); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]PeripheralCapability)
		}
	}
	return r0
}

// DisplaySourceMock_GetCapabilities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCapabilities'
type DisplaySourceMock_GetCapabilities_Call struct {
	*mock.Call
}

// GetCapabilities is a helper method to define mock.On call
func (_e *DisplaySourceMock_Expecter) GetCapabilities() *DisplaySourceMock_GetCapabilities_Call {
	return &DisplaySourceMock_GetCapabilities_Call{Call: _e.mock.On("GetCapabilities")}
}

func (_c *DisplaySourceMock_GetCapabilities_Call) Run(run func()) *DisplaySourceMock_GetCapabilities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DisplaySourceMock_GetCapabilities_Call) Return(peripheralCapabilitys []PeripheralCapability) *DisplaySourceMock_GetCapabilities_Call {
	_c.Call.Return(peripheralCapabilitys)
	return _c
}

func (_c *DisplaySourceMock_GetCapabilities_Call) RunAndReturn(run func() []PeripheralCapability) *DisplaySourceMock_GetCapabilities_Call {
	_c.Call.Return(run)
	return _c
}

// GetDisplayFrameBuffer provides a mock function for the type DisplaySourceMock
func (_mock *DisplaySourceMock) GetDisplayFrameBuffer(ctx context.Context) (*DisplayFrameBuffer, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetDisplayFrameBuffer")
	}

	var r0 *DisplayFrameBuffer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*DisplayFrameBuffer, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *DisplayFrameBuffer); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DisplayFrameBuffer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DisplaySourceMock_GetDisplayFrameBuffer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDisplayFrameBuffer'
type DisplaySourceMock_GetDisplayFrameBuffer_Call struct {
	*mock.Call
}

// GetDisplayFrameBuffer is a helper method to define mock.On call
//   - ctx context.Context
func (_e *DisplaySourceMock_Expecter) GetDisplayFrameBuffer(ctx interface{}) *DisplaySourceMock_GetDisplayFrameBuffer_Call {
	return &DisplaySourceMock_GetDisplayFrameBuffer_Call{Call: _e.mock.On("GetDisplayFrameBuffer", ctx)}
}

func (_c *DisplaySourceMock_GetDisplayFrameBuffer_Call) Run(run func(ctx context.Context)) *DisplaySourceMock_GetDisplayFrameBuffer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *DisplaySourceMock_GetDisplayFrameBuffer_Call) Return(displayFrameBuffer *DisplayFrameBuffer, err error) *DisplaySourceMock_GetDisplayFrameBuffer_Call {
	_c.Call.Return(displayFrameBuffer, err)
	return _c
}

func (_c *DisplaySourceMock_GetDisplayFrameBuffer_Call) RunAndReturn(run func(ctx context.Context) (*DisplayFrameBuffer, error)) *DisplaySourceMock_GetDisplayFrameBuffer_Call {
	_c.Call.Return(run)
	return _c
}

// GetDisplayMode provides a mock function for the type DisplaySourceMock
func (_mock *DisplaySourceMock) GetDisplayMode(ctx context.Context) (*DisplayMode, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetDisplayMode")
	}

	var r0 *DisplayMode
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*DisplayMode, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *DisplayMode); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DisplayMode)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DisplaySourceMock_GetDisplayMode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDisplayMode'
type DisplaySourceMock_GetDisplayMode_Call struct {
	*mock.Call
}

// GetDisplayMode is a helper method to define mock.On call
//   - ctx context.Context
func (_e *DisplaySourceMock_Expecter) GetDisplayMode(ctx interface{}) *DisplaySourceMock_GetDisplayMode_Call {
	return &DisplaySourceMock_GetDisplayMode_Call{Call: _e.mock.On("GetDisplayMode", ctx)}
}

func (_c *DisplaySourceMock_GetDisplayMode_Call) Run(run func(ctx context.Context)) *DisplaySourceMock_GetDisplayMode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *DisplaySourceMock_GetDisplayMode_Call) Return(displayMode *DisplayMode, err error) *DisplaySourceMock_GetDisplayMode_Call {
	_c.Call.Return(displayMode, err)
	return _c
}

func (_c *DisplaySourceMock_GetDisplayMode_Call) RunAndReturn(run func(ctx context.Context) (*DisplayMode, error)) *DisplaySourceMock_GetDisplayMode_Call {
	_c.Call.Return(run)
	return _c
}

// GetDisplayPixelFormat provides a mock function for the type DisplaySourceMock
func (_mock *DisplaySourceMock) GetDisplayPixelFormat(ctx context.Context) (*DisplayPixelFormat, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetDisplayPixelFormat")
	}

	var r0 *DisplayPixelFormat
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*DisplayPixelFormat, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *DisplayPixelFormat); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DisplayPixelFormat)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DisplaySourceMock_GetDisplayPixelFormat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDisplayPixelFormat'
type DisplaySourceMock_GetDisplayPixelFormat_Call struct {
	*mock.Call
}

// GetDisplayPixelFormat is a helper method to define mock.On call
//   - ctx context.Context
func (_e *DisplaySourceMock_Expecter) GetDisplayPixelFormat(ctx interface{}) *DisplaySourceMock_GetDisplayPixelFormat_Call {
	return &DisplaySourceMock_GetDisplayPixelFormat_Call{Call: _e.mock.On("GetDisplayPixelFormat", ctx)}
}

func (_c *DisplaySourceMock_GetDisplayPixelFormat_Call) Run(run func(ctx context.Context)) *DisplaySourceMock_GetDisplayPixelFormat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *DisplaySourceMock_GetDisplayPixelFormat_Call) Return(displayPixelFormat *DisplayPixelFormat, err error) *DisplaySourceMock_GetDisplayPixelFormat_Call {
	_c.Call.Return(displayPixelFormat, err)
	return _c
}

func (_c *DisplaySourceMock_GetDisplayPixelFormat_Call) RunAndReturn(run func(ctx context.Context) (*DisplayPixelFormat, error)) *DisplaySourceMock_GetDisplayPixelFormat_Call {
	_c.Call.Return(run)
	return _c
}

// GetDisplaySourceMetrics provides a mock function for the type DisplaySourceMock
func (_mock *DisplaySourceMock) GetDisplaySourceMetrics() DisplaySourceMetrics {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDisplaySourceMetrics")
	}

	var r0 DisplaySourceMetrics
	if returnFunc, ok := ret.Get(0).(func() DisplaySourceMetrics); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(DisplaySourceMetrics)
	}
	return r0
}

// DisplaySourceMock_GetDisplaySourceMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDisplaySourceMetrics'
type DisplaySourceMock_GetDisplaySourceMetrics_Call struct {
	*mock.Call
}

// GetDisplaySourceMetrics is a helper method to define mock.On call
func (_e *DisplaySourceMock_Expecter) GetDisplaySourceMetrics() *DisplaySourceMock_GetDisplaySourceMetrics_Call {
	return &DisplaySourceMock_GetDisplaySourceMetrics_Call{Call: _e.mock.On("GetDisplaySourceMetrics")}
}

func (_c *DisplaySourceMock_GetDisplaySourceMetrics_Call) Run(run func()) *DisplaySourceMock_GetDisplaySourceMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DisplaySourceMock_GetDisplaySourceMetrics_Call) Return(displaySourceMetrics DisplaySourceMetrics) *DisplaySourceMock_GetDisplaySourceMetrics_Call {
	_c.Call.Return(displaySourceMetrics)
	return _c
}

func (_c *DisplaySourceMock_GetDisplaySourceMetrics_Call) RunAndReturn(run func() DisplaySourceMetrics) *DisplaySourceMock_GetDisplaySourceMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// GetId provides a mock function for the type DisplaySourceMock
func (_mock *DisplaySourceMock) GetId() PeripheralId {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetId")
	}

	var r0 PeripheralId
	if returnFunc, ok := ret.Get(0).(func() PeripheralId); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(PeripheralId)
	}
	return r0
}

// DisplaySourceMock_GetId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetId'
type DisplaySourceMock_GetId_Call struct {
	*mock.Call
}

// GetId is a helper method to define mock.On call
func (_e *DisplaySourceMock_Expecter) GetId() *DisplaySourceMock_GetId_Call {
	return &DisplaySourceMock_GetId_Call{Call: _e.mock.On("GetId")}
}

func (_c *DisplaySourceMock_GetId_Call) Run(run func()) *DisplaySourceMock_GetId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DisplaySourceMock_GetId_Call) Return(peripheralId PeripheralId) *DisplaySourceMock_GetId_Call {
	_c.Call.Return(peripheralId)
	return _c
}

func (_c *DisplaySourceMock_GetId_Call) RunAndReturn(run func() PeripheralId) *DisplaySourceMock_GetId_Call {
	_c.Call.Return(run)
	return _c
}

// GetName provides a mock function for the type DisplaySourceMock
func (_mock *DisplaySourceMock) GetName() PeripheralName {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 PeripheralName
	if returnFunc, ok := ret.Get(0).(func() PeripheralName); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(PeripheralName)
	}
	return r0
}

// DisplaySourceMock_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type DisplaySourceMock_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *DisplaySourceMock_Expecter) GetName() *DisplaySourceMock_GetName_Call {
	return &DisplaySourceMock_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *DisplaySourceMock_GetName_Call) Run(run func()) *DisplaySourceMock_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DisplaySourceMock_GetName_Call) Return(peripheralName PeripheralName) *DisplaySourceMock_GetName_Call {
	_c.Call.Return(peripheralName)
	return _c
}

func (_c *DisplaySourceMock_GetName_Call) RunAndReturn(run func() PeripheralName) *DisplaySourceMock_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// Terminate provides a mock function for the type DisplaySourceMock
func (_mock *DisplaySourceMock) Terminate(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Terminate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DisplaySourceMock_Terminate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Terminate'
type DisplaySourceMock_Terminate_Call struct {
	*mock.Call
}

// Terminate is a helper method to define mock.On call
//   - ctx context.Context
func (_e *DisplaySourceMock_Expecter) Terminate(ctx interface{}) *DisplaySourceMock_Terminate_Call {
	return &DisplaySourceMock_Terminate_Call{Call: _e.mock.On("Terminate", ctx)}
}

func (_c *DisplaySourceMock_Terminate_Call) Run(run func(ctx context.Context)) *DisplaySourceMock_Terminate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *DisplaySourceMock_Terminate_Call) Return(err error) *DisplaySourceMock_Terminate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DisplaySourceMock_Terminate_Call) RunAndReturn(run func(ctx context.Context) error) *DisplaySourceMock_Terminate_Call {
	_c.Call.Return(run)
	return _c
}
