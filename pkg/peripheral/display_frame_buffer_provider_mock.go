// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package peripheral

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewDisplayFrameBufferProviderMock creates a new instance of DisplayFrameBufferProviderMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDisplayFrameBufferProviderMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *DisplayFrameBufferProviderMock {
	mock := &DisplayFrameBufferProviderMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// DisplayFrameBufferProviderMock is an autogenerated mock type for the DisplayFrameBufferProvider type
type DisplayFrameBufferProviderMock struct {
	mock.Mock
}

type DisplayFrameBufferProviderMock_Expecter struct {
	mock *mock.Mock
}

func (_m *DisplayFrameBufferProviderMock) EXPECT() *DisplayFrameBufferProviderMock_Expecter {
	return &DisplayFrameBufferProviderMock_Expecter{mock: &_m.Mock}
}

// GetDisplayFrameBuffer provides a mock function for the type DisplayFrameBufferProviderMock
func (_mock *DisplayFrameBufferProviderMock) GetDisplayFrameBuffer(ctx context.Context) (*DisplayFrameBuffer, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetDisplayFrameBuffer")
	}

	var r0 *DisplayFrameBuffer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*DisplayFrameBuffer, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *DisplayFrameBuffer); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DisplayFrameBuffer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DisplayFrameBufferProviderMock_GetDisplayFrameBuffer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDisplayFrameBuffer'
type DisplayFrameBufferProviderMock_GetDisplayFrameBuffer_Call struct {
	*mock.Call
}

// GetDisplayFrameBuffer is a helper method to define mock.On call
//   - ctx context.Context
func (_e *DisplayFrameBufferProviderMock_Expecter) GetDisplayFrameBuffer(ctx interface{}) *DisplayFrameBufferProviderMock_GetDisplayFrameBuffer_Call {
	return &DisplayFrameBufferProviderMock_GetDisplayFrameBuffer_Call{Call: _e.mock.On("GetDisplayFrameBuffer", ctx)}
}

func (_c *DisplayFrameBufferProviderMock_GetDisplayFrameBuffer_Call) Run(run func(ctx context.Context)) *DisplayFrameBufferProviderMock_GetDisplayFrameBuffer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *DisplayFrameBufferProviderMock_GetDisplayFrameBuffer_Call) Return(displayFrameBuffer *DisplayFrameBuffer, err error) *DisplayFrameBufferProviderMock_GetDisplayFrameBuffer_Call {
	_c.Call.Return(displayFrameBuffer, err)
	return _c
}

func (_c *DisplayFrameBufferProviderMock_GetDisplayFrameBuffer_Call) RunAndReturn(run func(ctx context.Context) (*DisplayFrameBuffer, error)) *DisplayFrameBufferProviderMock_GetDisplayFrameBuffer_Call {
	_c.Call.Return(run)
	return _c
}

// GetDisplayMode provides a mock function for the type DisplayFrameBufferProviderMock
func (_mock *DisplayFrameBufferProviderMock) GetDisplayMode(ctx context.Context) (*DisplayMode, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetDisplayMode")
	}

	var r0 *DisplayMode
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*DisplayMode, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *DisplayMode); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DisplayMode)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DisplayFrameBufferProviderMock_GetDisplayMode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDisplayMode'
type DisplayFrameBufferProviderMock_GetDisplayMode_Call struct {
	*mock.Call
}

// GetDisplayMode is a helper method to define mock.On call
//   - ctx context.Context
func (_e *DisplayFrameBufferProviderMock_Expecter) GetDisplayMode(ctx interface{}) *DisplayFrameBufferProviderMock_GetDisplayMode_Call {
	return &DisplayFrameBufferProviderMock_GetDisplayMode_Call{Call: _e.mock.On("GetDisplayMode", ctx)}
}

func (_c *DisplayFrameBufferProviderMock_GetDisplayMode_Call) Run(run func(ctx context.Context)) *DisplayFrameBufferProviderMock_GetDisplayMode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *DisplayFrameBufferProviderMock_GetDisplayMode_Call) Return(displayMode *DisplayMode, err error) *DisplayFrameBufferProviderMock_GetDisplayMode_Call {
	_c.Call.Return(displayMode, err)
	return _c
}

func (_c *DisplayFrameBufferProviderMock_GetDisplayMode_Call) RunAndReturn(run func(ctx context.Context) (*DisplayMode, error)) *DisplayFrameBufferProviderMock_GetDisplayMode_Call {
	_c.Call.Return(run)
	return _c
}

// GetDisplayPixelFormat provides a mock function for the type DisplayFrameBufferProviderMock
func (_mock *DisplayFrameBufferProviderMock) GetDisplayPixelFormat(ctx context.Context) DisplayPixelFormat {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetDisplayPixelFormat")
	}

	var r0 DisplayPixelFormat
	if returnFunc, ok := ret.Get(0).(func(context.Context) DisplayPixelFormat); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(DisplayPixelFormat)
	}
	return r0
}

// DisplayFrameBufferProviderMock_GetDisplayPixelFormat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDisplayPixelFormat'
type DisplayFrameBufferProviderMock_GetDisplayPixelFormat_Call struct {
	*mock.Call
}

// GetDisplayPixelFormat is a helper method to define mock.On call
//   - ctx context.Context
func (_e *DisplayFrameBufferProviderMock_Expecter) GetDisplayPixelFormat(ctx interface{}) *DisplayFrameBufferProviderMock_GetDisplayPixelFormat_Call {
	return &DisplayFrameBufferProviderMock_GetDisplayPixelFormat_Call{Call: _e.mock.On("GetDisplayPixelFormat", ctx)}
}

func (_c *DisplayFrameBufferProviderMock_GetDisplayPixelFormat_Call) Run(run func(ctx context.Context)) *DisplayFrameBufferProviderMock_GetDisplayPixelFormat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *DisplayFrameBufferProviderMock_GetDisplayPixelFormat_Call) Return(displayPixelFormat DisplayPixelFormat) *DisplayFrameBufferProviderMock_GetDisplayPixelFormat_Call {
	_c.Call.Return(displayPixelFormat)
	return _c
}

func (_c *DisplayFrameBufferProviderMock_GetDisplayPixelFormat_Call) RunAndReturn(run func(ctx context.Context) DisplayPixelFormat) *DisplayFrameBufferProviderMock_GetDisplayPixelFormat_Call {
	_c.Call.Return(run)
	return _c
}
