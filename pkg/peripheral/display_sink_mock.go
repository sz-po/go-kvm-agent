// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package peripheral

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewDisplaySinkMock creates a new instance of DisplaySinkMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDisplaySinkMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *DisplaySinkMock {
	mock := &DisplaySinkMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// DisplaySinkMock is an autogenerated mock type for the DisplaySink type
type DisplaySinkMock struct {
	mock.Mock
}

type DisplaySinkMock_Expecter struct {
	mock *mock.Mock
}

func (_m *DisplaySinkMock) EXPECT() *DisplaySinkMock_Expecter {
	return &DisplaySinkMock_Expecter{mock: &_m.Mock}
}

// Capabilities provides a mock function for the type DisplaySinkMock
func (_mock *DisplaySinkMock) Capabilities() []PeripheralCapability {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Capabilities")
	}

	var r0 []PeripheralCapability
	if returnFunc, ok := ret.Get(0).(func() []PeripheralCapability); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]PeripheralCapability)
		}
	}
	return r0
}

// DisplaySinkMock_Capabilities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Capabilities'
type DisplaySinkMock_Capabilities_Call struct {
	*mock.Call
}

// Capabilities is a helper method to define mock.On call
func (_e *DisplaySinkMock_Expecter) Capabilities() *DisplaySinkMock_Capabilities_Call {
	return &DisplaySinkMock_Capabilities_Call{Call: _e.mock.On("Capabilities")}
}

func (_c *DisplaySinkMock_Capabilities_Call) Run(run func()) *DisplaySinkMock_Capabilities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DisplaySinkMock_Capabilities_Call) Return(peripheralCapabilitys []PeripheralCapability) *DisplaySinkMock_Capabilities_Call {
	_c.Call.Return(peripheralCapabilitys)
	return _c
}

func (_c *DisplaySinkMock_Capabilities_Call) RunAndReturn(run func() []PeripheralCapability) *DisplaySinkMock_Capabilities_Call {
	_c.Call.Return(run)
	return _c
}

// GetDisplayInfo provides a mock function for the type DisplaySinkMock
func (_mock *DisplaySinkMock) GetDisplayInfo() (DisplayInfo, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDisplayInfo")
	}

	var r0 DisplayInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (DisplayInfo, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() DisplayInfo); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(DisplayInfo)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DisplaySinkMock_GetDisplayInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDisplayInfo'
type DisplaySinkMock_GetDisplayInfo_Call struct {
	*mock.Call
}

// GetDisplayInfo is a helper method to define mock.On call
func (_e *DisplaySinkMock_Expecter) GetDisplayInfo() *DisplaySinkMock_GetDisplayInfo_Call {
	return &DisplaySinkMock_GetDisplayInfo_Call{Call: _e.mock.On("GetDisplayInfo")}
}

func (_c *DisplaySinkMock_GetDisplayInfo_Call) Run(run func()) *DisplaySinkMock_GetDisplayInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DisplaySinkMock_GetDisplayInfo_Call) Return(displayInfo DisplayInfo, err error) *DisplaySinkMock_GetDisplayInfo_Call {
	_c.Call.Return(displayInfo, err)
	return _c
}

func (_c *DisplaySinkMock_GetDisplayInfo_Call) RunAndReturn(run func() (DisplayInfo, error)) *DisplaySinkMock_GetDisplayInfo_Call {
	_c.Call.Return(run)
	return _c
}

// HandleDisplayControlEvent provides a mock function for the type DisplaySinkMock
func (_mock *DisplaySinkMock) HandleDisplayControlEvent(event DisplayControlEvent) error {
	ret := _mock.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for HandleDisplayControlEvent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(DisplayControlEvent) error); ok {
		r0 = returnFunc(event)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DisplaySinkMock_HandleDisplayControlEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleDisplayControlEvent'
type DisplaySinkMock_HandleDisplayControlEvent_Call struct {
	*mock.Call
}

// HandleDisplayControlEvent is a helper method to define mock.On call
//   - event DisplayControlEvent
func (_e *DisplaySinkMock_Expecter) HandleDisplayControlEvent(event interface{}) *DisplaySinkMock_HandleDisplayControlEvent_Call {
	return &DisplaySinkMock_HandleDisplayControlEvent_Call{Call: _e.mock.On("HandleDisplayControlEvent", event)}
}

func (_c *DisplaySinkMock_HandleDisplayControlEvent_Call) Run(run func(event DisplayControlEvent)) *DisplaySinkMock_HandleDisplayControlEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 DisplayControlEvent
		if args[0] != nil {
			arg0 = args[0].(DisplayControlEvent)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *DisplaySinkMock_HandleDisplayControlEvent_Call) Return(err error) *DisplaySinkMock_HandleDisplayControlEvent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DisplaySinkMock_HandleDisplayControlEvent_Call) RunAndReturn(run func(event DisplayControlEvent) error) *DisplaySinkMock_HandleDisplayControlEvent_Call {
	_c.Call.Return(run)
	return _c
}

// HandleDisplayDataEvent provides a mock function for the type DisplaySinkMock
func (_mock *DisplaySinkMock) HandleDisplayDataEvent(event DisplayDataEvent) error {
	ret := _mock.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for HandleDisplayDataEvent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(DisplayDataEvent) error); ok {
		r0 = returnFunc(event)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DisplaySinkMock_HandleDisplayDataEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleDisplayDataEvent'
type DisplaySinkMock_HandleDisplayDataEvent_Call struct {
	*mock.Call
}

// HandleDisplayDataEvent is a helper method to define mock.On call
//   - event DisplayDataEvent
func (_e *DisplaySinkMock_Expecter) HandleDisplayDataEvent(event interface{}) *DisplaySinkMock_HandleDisplayDataEvent_Call {
	return &DisplaySinkMock_HandleDisplayDataEvent_Call{Call: _e.mock.On("HandleDisplayDataEvent", event)}
}

func (_c *DisplaySinkMock_HandleDisplayDataEvent_Call) Run(run func(event DisplayDataEvent)) *DisplaySinkMock_HandleDisplayDataEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 DisplayDataEvent
		if args[0] != nil {
			arg0 = args[0].(DisplayDataEvent)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *DisplaySinkMock_HandleDisplayDataEvent_Call) Return(err error) *DisplaySinkMock_HandleDisplayDataEvent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DisplaySinkMock_HandleDisplayDataEvent_Call) RunAndReturn(run func(event DisplayDataEvent) error) *DisplaySinkMock_HandleDisplayDataEvent_Call {
	_c.Call.Return(run)
	return _c
}

// Id provides a mock function for the type DisplaySinkMock
func (_mock *DisplaySinkMock) Id() PeripheralId {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Id")
	}

	var r0 PeripheralId
	if returnFunc, ok := ret.Get(0).(func() PeripheralId); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(PeripheralId)
	}
	return r0
}

// DisplaySinkMock_Id_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Id'
type DisplaySinkMock_Id_Call struct {
	*mock.Call
}

// Id is a helper method to define mock.On call
func (_e *DisplaySinkMock_Expecter) Id() *DisplaySinkMock_Id_Call {
	return &DisplaySinkMock_Id_Call{Call: _e.mock.On("Id")}
}

func (_c *DisplaySinkMock_Id_Call) Run(run func()) *DisplaySinkMock_Id_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DisplaySinkMock_Id_Call) Return(peripheralId PeripheralId) *DisplaySinkMock_Id_Call {
	_c.Call.Return(peripheralId)
	return _c
}

func (_c *DisplaySinkMock_Id_Call) RunAndReturn(run func() PeripheralId) *DisplaySinkMock_Id_Call {
	_c.Call.Return(run)
	return _c
}

// SetDisplayMode provides a mock function for the type DisplaySinkMock
func (_mock *DisplaySinkMock) SetDisplayMode(mode DisplayMode) error {
	ret := _mock.Called(mode)

	if len(ret) == 0 {
		panic("no return value specified for SetDisplayMode")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(DisplayMode) error); ok {
		r0 = returnFunc(mode)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DisplaySinkMock_SetDisplayMode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDisplayMode'
type DisplaySinkMock_SetDisplayMode_Call struct {
	*mock.Call
}

// SetDisplayMode is a helper method to define mock.On call
//   - mode DisplayMode
func (_e *DisplaySinkMock_Expecter) SetDisplayMode(mode interface{}) *DisplaySinkMock_SetDisplayMode_Call {
	return &DisplaySinkMock_SetDisplayMode_Call{Call: _e.mock.On("SetDisplayMode", mode)}
}

func (_c *DisplaySinkMock_SetDisplayMode_Call) Run(run func(mode DisplayMode)) *DisplaySinkMock_SetDisplayMode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 DisplayMode
		if args[0] != nil {
			arg0 = args[0].(DisplayMode)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *DisplaySinkMock_SetDisplayMode_Call) Return(err error) *DisplaySinkMock_SetDisplayMode_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DisplaySinkMock_SetDisplayMode_Call) RunAndReturn(run func(mode DisplayMode) error) *DisplaySinkMock_SetDisplayMode_Call {
	_c.Call.Return(run)
	return _c
}

// Terminate provides a mock function for the type DisplaySinkMock
func (_mock *DisplaySinkMock) Terminate(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Terminate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DisplaySinkMock_Terminate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Terminate'
type DisplaySinkMock_Terminate_Call struct {
	*mock.Call
}

// Terminate is a helper method to define mock.On call
//   - ctx context.Context
func (_e *DisplaySinkMock_Expecter) Terminate(ctx interface{}) *DisplaySinkMock_Terminate_Call {
	return &DisplaySinkMock_Terminate_Call{Call: _e.mock.On("Terminate", ctx)}
}

func (_c *DisplaySinkMock_Terminate_Call) Run(run func(ctx context.Context)) *DisplaySinkMock_Terminate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *DisplaySinkMock_Terminate_Call) Return(err error) *DisplaySinkMock_Terminate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DisplaySinkMock_Terminate_Call) RunAndReturn(run func(ctx context.Context) error) *DisplaySinkMock_Terminate_Call {
	_c.Call.Return(run)
	return _c
}
