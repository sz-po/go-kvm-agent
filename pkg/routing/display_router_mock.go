// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package routing

import (
	mock "github.com/stretchr/testify/mock"
	"github.com/szymonpodeszwa/go-kvm-agent/pkg/peripheral"
)

// NewDisplayRouterMock creates a new instance of DisplayRouterMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDisplayRouterMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *DisplayRouterMock {
	mock := &DisplayRouterMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// DisplayRouterMock is an autogenerated mock type for the DisplayRouter type
type DisplayRouterMock struct {
	mock.Mock
}

type DisplayRouterMock_Expecter struct {
	mock *mock.Mock
}

func (_m *DisplayRouterMock) EXPECT() *DisplayRouterMock_Expecter {
	return &DisplayRouterMock_Expecter{mock: &_m.Mock}
}

// Connect provides a mock function for the type DisplayRouterMock
func (_mock *DisplayRouterMock) Connect(sourceId peripheral.PeripheralId, sinkId peripheral.PeripheralId) error {
	ret := _mock.Called(sourceId, sinkId)

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(peripheral.PeripheralId, peripheral.PeripheralId) error); ok {
		r0 = returnFunc(sourceId, sinkId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DisplayRouterMock_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type DisplayRouterMock_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
//   - sourceId peripheral.PeripheralId
//   - sinkId peripheral.PeripheralId
func (_e *DisplayRouterMock_Expecter) Connect(sourceId interface{}, sinkId interface{}) *DisplayRouterMock_Connect_Call {
	return &DisplayRouterMock_Connect_Call{Call: _e.mock.On("Connect", sourceId, sinkId)}
}

func (_c *DisplayRouterMock_Connect_Call) Run(run func(sourceId peripheral.PeripheralId, sinkId peripheral.PeripheralId)) *DisplayRouterMock_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 peripheral.PeripheralId
		if args[0] != nil {
			arg0 = args[0].(peripheral.PeripheralId)
		}
		var arg1 peripheral.PeripheralId
		if args[1] != nil {
			arg1 = args[1].(peripheral.PeripheralId)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *DisplayRouterMock_Connect_Call) Return(err error) *DisplayRouterMock_Connect_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DisplayRouterMock_Connect_Call) RunAndReturn(run func(sourceId peripheral.PeripheralId, sinkId peripheral.PeripheralId) error) *DisplayRouterMock_Connect_Call {
	_c.Call.Return(run)
	return _c
}

// DisconnectSink provides a mock function for the type DisplayRouterMock
func (_mock *DisplayRouterMock) DisconnectSink(sinkId peripheral.PeripheralId) error {
	ret := _mock.Called(sinkId)

	if len(ret) == 0 {
		panic("no return value specified for DisconnectSink")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(peripheral.PeripheralId) error); ok {
		r0 = returnFunc(sinkId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DisplayRouterMock_DisconnectSink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisconnectSink'
type DisplayRouterMock_DisconnectSink_Call struct {
	*mock.Call
}

// DisconnectSink is a helper method to define mock.On call
//   - sinkId peripheral.PeripheralId
func (_e *DisplayRouterMock_Expecter) DisconnectSink(sinkId interface{}) *DisplayRouterMock_DisconnectSink_Call {
	return &DisplayRouterMock_DisconnectSink_Call{Call: _e.mock.On("DisconnectSink", sinkId)}
}

func (_c *DisplayRouterMock_DisconnectSink_Call) Run(run func(sinkId peripheral.PeripheralId)) *DisplayRouterMock_DisconnectSink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 peripheral.PeripheralId
		if args[0] != nil {
			arg0 = args[0].(peripheral.PeripheralId)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *DisplayRouterMock_DisconnectSink_Call) Return(err error) *DisplayRouterMock_DisconnectSink_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DisplayRouterMock_DisconnectSink_Call) RunAndReturn(run func(sinkId peripheral.PeripheralId) error) *DisplayRouterMock_DisconnectSink_Call {
	_c.Call.Return(run)
	return _c
}

// DisconnectSource provides a mock function for the type DisplayRouterMock
func (_mock *DisplayRouterMock) DisconnectSource(sourceId peripheral.PeripheralId) error {
	ret := _mock.Called(sourceId)

	if len(ret) == 0 {
		panic("no return value specified for DisconnectSource")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(peripheral.PeripheralId) error); ok {
		r0 = returnFunc(sourceId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DisplayRouterMock_DisconnectSource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisconnectSource'
type DisplayRouterMock_DisconnectSource_Call struct {
	*mock.Call
}

// DisconnectSource is a helper method to define mock.On call
//   - sourceId peripheral.PeripheralId
func (_e *DisplayRouterMock_Expecter) DisconnectSource(sourceId interface{}) *DisplayRouterMock_DisconnectSource_Call {
	return &DisplayRouterMock_DisconnectSource_Call{Call: _e.mock.On("DisconnectSource", sourceId)}
}

func (_c *DisplayRouterMock_DisconnectSource_Call) Run(run func(sourceId peripheral.PeripheralId)) *DisplayRouterMock_DisconnectSource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 peripheral.PeripheralId
		if args[0] != nil {
			arg0 = args[0].(peripheral.PeripheralId)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *DisplayRouterMock_DisconnectSource_Call) Return(err error) *DisplayRouterMock_DisconnectSource_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DisplayRouterMock_DisconnectSource_Call) RunAndReturn(run func(sourceId peripheral.PeripheralId) error) *DisplayRouterMock_DisconnectSource_Call {
	_c.Call.Return(run)
	return _c
}
